/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var bangalore = ee.FeatureCollection("users/ujavalgandhi/public/bangalore_boundary"),
    chirps = ee.ImageCollection("UCSB-CHG/CHIRPS/PENTAD");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// CHIRPS data comes as Pentad
// We need to aggregate it to monthly
// We can compute monthly long term averages

// Long Period Average (LPA) should by 30 years or more

// List of 30 years
var lpaYears = ee.List.sequence(1987, 2016)
var months = ee.List.sequence(1, 12)

// Map over the years and create a monthly totals collection
var monthlyImages = lpaYears.map(function(year) {
  return months.map(function(month) {
    var filtered = chirps
      .filter(ee.Filter.calendarRange(year, year, 'year'))
      .filter(ee.Filter.calendarRange(month, month, 'month'))
    var monthly = filtered.sum()
    return monthly.set({'month': month, 'year': year})
  })
}).flatten()

// We now have 1 image per month for entire long-period duratioon
var monthlyCol = ee.ImageCollection.fromImages(monthlyImages)

// We can compute average for each month across all years
// i.e. Average July precipitation for all July months in the collection
var longTermMeans = months.map(function(month) {
    var filtered = monthlyCol.filter(ee.Filter.eq('month', month))
    var monthlyMean = filtered.mean()
    return monthlyMean.set('month', month)
})
var monthlyRainfall = ee.ImageCollection.fromImages(longTermMeans)
// Now we take 2017 data and compute monthly average

var filtered = chirps.filter(ee.Filter.date('2017-01-01', '2017-12-31'))

var monthlyTotals = months.map(function(month) {
  var monthly = filtered.filter(ee.Filter.calendarRange(month, month, 'month'))
  var total = monthly.sum()
  return total.set('month', month)
})
print(monthlyTotals)
var observedRainfall = ee.ImageCollection.fromImages(monthlyTotals)

var deviation = months.map(function(month) {
  var longTermMean = ee.Image(monthlyRainfall.filter(ee.Filter.eq('month', month)).first())
  var monthlyObserved = ee.Image(observedRainfall.filter(ee.Filter.eq('month', month)).first())
  var monthlyDeviation = ((monthlyObserved.subtract(longTermMean)).divide(longTermMean)).multiply(100)
  return monthlyDeviation.set('month', month)
})
print(deviation)

var chart = ui.Chart.image.series({
  imageCollection: deviation,
  region: bangalore.geometry(),
  reducer: ee.Reducer.mean(),
  scale: 5000,
  xProperty: 'month'})
print(chart)