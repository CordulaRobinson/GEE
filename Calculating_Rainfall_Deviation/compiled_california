// Load the CHIRPS Pentad dataset
var chirps = ee.ImageCollection("UCSB-CHG/CHIRPS/PENTAD");

// Load in California and its counties
var admin2 = ee.FeatureCollection("FAO/GAUL_SIMPLIFIED_500m/2015/level2")
var cali = admin2.filter(ee.Filter.eq('ADM1_NAME', 'California'));
Map.centerObject(cali, 6);

// Filter to Year 2017 data
var filtered = chirps.filter(ee.Filter.date('2017-01-01', '2017-12-31'));

// Find the cumulative rainfall and add it to the map
var total = filtered.reduce(ee.Reducer.sum());

var visParams = {
  min: 0,
  max: 2000,
  palette: ['white', 'blue']
};

Map.addLayer(total, visParams, 'Total Rainfall');

// Calculate the average rainfall in California
var stats = total.reduceRegion({
  reducer: ee.Reducer.mean(),
  geometry: cali.geometry(),
  scale: 5000
});

// Calculate the Long Term Rainfall Average

// CHIRPS data comes as Pentads, we can compute the monthly long term averages
// Long Period Average (LPA) should be 30 years or more

// List of 30 years from 1990-2020
var lpaYears = ee.List.sequence(1990, 2019);
// List of all months
var months = ee.List.sequence(1, 12);

// Map over the years and create a monthly totals collection
var monthlyImages = lpaYears.map(function(year) {
  return months.map(function(month) {
    var filtered = chirps.filter(ee.Filter.calendarRange(year, year, 'year'))
      .filter(ee.Filter.calendarRange(month, month, 'month'));
    var monthlyTotal = filtered.sum();
    return monthlyTotal.set({'month': month, 'year': year});
  });
}).flatten();

// We now have 1 image per month for the entire long-period duration
var monthlyCol = ee.ImageCollection.fromImages(monthlyImages);

// Compute the average for each month across all years
var longTermMeans = months.map(function(month) {
  var filtered = monthlyCol.filter(ee.Filter.eq('month', month));
  var monthlyMean = filtered.mean();
  return monthlyMean.set('month', month);
});
var monthlyRainfall = ee.ImageCollection.fromImages(longTermMeans)

// Create a chart that plots the average monthly rainfall across all years
var chart = ui.Chart.image.series({
  imageCollection: monthlyRainfall,
  region: cali,
  reducer: ee.Reducer.mean(),
  scale: 5000,
  xProperty: 'month'
}).setOptions({
      lineWidth: 1,
      pointSize: 3,
      title: 'Long Term Monthly Mean Rainfall Over California',
      vAxis: {title: 'Rainfall (mm)'},
      hAxis: {title: 'Month', gridline: {count:12}}
});
print(chart);

// Compute the monthly average for 2021 data only
var filtered = chirps.filter(ee.Filter.date('2020-01-01', '2020-12-31'));

var monthlyTotals = months.map(function(month) {
  var monthly = filtered.filter(ee.Filter.calendarRange(month, month, 'month'));
  var total = monthly.sum();
  return total.set('month', month);
});
var observedRainfall = ee.ImageCollection.fromImages(monthlyTotals);

// Calculate the deviation between 2021 and LPA
var deviation = months.map(function(month) {
  var longTermMean = ee.Image(monthlyRainfall.filter(ee.Filter.eq('month', month)).first());
  var monthlyObserved = ee.Image(observedRainfall.filter(ee.Filter.eq('month', month)).first());
  var monthlyDeviation = ((monthlyObserved.subtract(longTermMean)).divide(longTermMean)).multiply(100);
  return monthlyDeviation.set('month', month);
});


// Plot the deviations
var chart = ui.Chart.image.series({
  imageCollection: deviation,
  region: cali.geometry(),
  reducer: ee.Reducer.mean(),
  scale: 5000,
  xProperty: 'month'});
print(chart);

// Calculate Seasonal Deviation
var startMonth = 2;
var endMonth = 7;

var combinedFilter = ee.Filter.and(
  ee.Filter.gte('month', startMonth),
  ee.Filter.lte('month', endMonth));
  
var rainfallNormal = monthlyRainfall.filter(combinedFilter).sum();
var rainfallObserved = observedRainfall.filter(combinedFilter).sum();

var seasonalDeviation = ((rainfallObserved.subtract(rainfallNormal)).divide(rainfallNormal)).multiply(100);

//
var visParamsDev = {
  min: -70,
  max: 20,
  palette: ['#d7191c','#fdae61','#ffffbf','#abd9e9','#2c7bb6']
};

//
Map.addLayer(seasonalDeviation.clip(cali), visParamsDev, 'Deviation');

//
var districtDeviation = seasonalDeviation.reduceRegions({
  collection: cali,
  reducer: ee.Reducer.mean(),
  scale: 5000});
Map.addLayer(districtDeviation, {color: 'grey'}, 'Districts');

print(districtDeviation);
// To style vectors, we create an empty image and paint it
var empty = ee.Image().byte();

var styledImage = empty.paint({
  featureCollection: districtDeviation,
  color: 'mean'
});

Map.addLayer(styledImage, visParamsDev, 'District Deviations');

var outline = styledImage.paint({
  featureCollection: districtDeviation,
  color: -70,
  width: 1
});

Map.addLayer(outline, visParamsDev, 'District Deviations with outline');



