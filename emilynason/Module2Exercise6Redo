/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-46.69219787846015, -23.735953816426278],
          [-46.69219787846015, -23.86537322399207],
          [-46.42852600346015, -23.86537322399207],
          [-46.42852600346015, -23.735953816426278]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// changing from sentinel-2 to landsat 8
// changing from NDVI of a farm to MNDWI of a drought area
// changing from area in India to sao paolo brazil
// changed filter dates: drought started in November 2014
var l8 = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2");
Map.addLayer(geometry, {color: 'red'}, 'reserviors');
Map.centerObject(geometry);

// changed name of cloud cover percent property to match landsat
/*
var filtered = l8.filter(ee.Filter.date('2014-08-01', '2016-08-01'))
  .filter(ee.Filter.lt('CLOUD_COVER', 30))
  .filter(ee.Filter.bounds(geometry))*/
  // covered in cloud masking function
  
// cloud masking pulled from example scripts - dates changed 

// This example demonstrates the use of the Landsat 8 Collection 2, Level 2
// QA_PIXEL band (CFMask) to mask unwanted pixels.

function maskL8sr(image) {
  // Bit 0 - Fill
  // Bit 1 - Dilated Cloud
  // Bit 2 - Cirrus
  // Bit 3 - Cloud
  // Bit 4 - Cloud Shadow
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Apply the scaling factors to the appropriate bands.
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);

  // Replace the original bands with the scaled ones and apply the masks.
  return image.addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask)
      // added this to get time stamp for time series
      .copyProperties(image, ["system:time_start"]);
}
// Map the function over of dates.
var collection = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
                     .filterDate('2014-08-01', '2016-08-01')
                     .filter(ee.Filter.bounds(geometry))
                     .map(maskL8sr);
// added filter for sao paolo selected area
//var composite = collection.median().filter(ee.Filter.bounds(geometry));

// changed max
// changed bands to match RGB in landsat
var rgbVis = {min: 0.0, max: 0.3, bands: ['SR_B4', 'SR_B3', 'SR_B2']};
//Map.addLayer(composite, rgbVis, '');

// Write a function that computes MNDWI for an image and adds it as a band
function addMNDWI(image) {
  var mndwi = image.normalizedDifference(['SR_B3', 'SR_B6']).rename('mndwi');
  return image.addBands(mndwi);
}

// Map the function over the collection
var withMndwi = collection.map(addMNDWI);


// Display a time-series chart
var chart = ui.Chart.image.series({
  imageCollection: withMndwi.select('mndwi'),
  region: geometry,
  reducer: ee.Reducer.mean(),
  scale: 20
}).setOptions({
      lineWidth: 1,
      title: 'MNDWI Time Series',
      interpolateNulls: true,
      vAxis: {title: 'MNDWI'},
      hAxis: {title: '', format: 'YYYY-MMM'}
    })
print(chart);

Map.addLayer(collection, rgbVis, 'RGB');
//Map.addLayer(withMndwi.select('mndwi'),  {min: 0, max: 0.5, palette: ['white', 'blue']}, 'MNDWI');
