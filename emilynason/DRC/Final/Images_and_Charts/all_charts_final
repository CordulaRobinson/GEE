/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var s2 = ee.ImageCollection("COPERNICUS/S2_SR"),
    visualization = {"min":0,"max":0.3,"bands":["B4","B3","B2"]},
    s1 = ee.ImageCollection("COPERNICUS/S1_GRD"),
    kibali_line = /* color: #d63000 */ee.Geometry.LineString(
        [[29.5632273259612, 3.142541215764356],
         [29.590864807650654, 3.09600420367024]]),
    musonoi_line = /* color: #98ff00 */ee.Geometry.LineString(
        [[25.34230284969935, -10.723527371370468],
         [25.466242363859507, -10.705311158402363]]),
    sarVIS = {"min":-25,"max":0},
    mojave_line = /* color: #d619c3 */ee.Geometry.LineString(
        [[-115.80489660476239, 34.89453802554642],
         [-115.38054968093427, 35.03184163656472]]),
    kanunka_line = 
    /* color: #ffc82d */
    /* shown: false */
    ee.Geometry.LineString(
        [[27.393809280395935, -7.546264139871036],
         [27.409516296387146, -7.530863060720725]]),
    musonoi_mine = /* color: #bf04c2 */ee.Geometry.Polygon(
        [[[25.34, -10.78],
          [25.34, -10.675],
          [25.475, -10.675],
          [25.475, -10.78]]]),
    kibali_mine = 
    /* color: #bf04c2 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[29.56, 3.1],
          [29.56, 3.155],
          [29.615, 3.155],
          [29.615, 3.1]]]),
    kanunka_mine = /* color: #00ffff */ee.Geometry.Polygon(
        [[[27.355, -7.56],
          [27.355, -7.51],
          [27.415, -7.51],
          [27.415, -7.56]]]),
    mojave_geo = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-115.71, 34.91],
          [-115.71, 34.93],
          [-115.66, 34.93],
          [-115.66, 34.91]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Cloud masking function for Sentinel-2 Images
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask).divide(10000);
}

// Creates and Adds a 2021 Median Composite Image of selected Area
function s2Composite(geometry) {
  var filtered = s2
  .filter(ee.Filter.bounds(geometry))
  .filter(ee.Filter.date('2021-01-01', '2021-12-31'))
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
  .map(maskS2clouds)
  .select('B.*');
  var composite = filtered.median().clip(geometry)
  return composite
}

// Creates 2021 SAR VH Median Composite Image of the selected Area
function s1Composite(geometry) {
  var sar_image = s1
    .filter(ee.Filter.eq('instrumentMode','IW'))
    .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING'))
    .filter(ee.Filter.eq('resolution_meters',10))
    .filter(ee.Filter.bounds(geometry))
    .filter(ee.Filter.date('2021-01-01', '2021-12-31'))
    .select('VH')
    .median().clip(geometry);
  return sar_image;
}

// Creates an image of the elevation data of the selected area
function elevation(geometry) {
  var srtm = ee.Image('NASA/NASADEM_HGT/001')
    .select('elevation')
    .clip(area);
  return srtm;
}

// Select desired area and cross section
var area = musonoi_mine
var line =  musonoi_line
Map.centerObject(area, 13);
var composite = s2Composite(area);
var sar_comp = s1Composite(area);
var srtm = elevation(area);
Map.addLayer(composite, visualization, '2021 Median Composite');

//Function for adding specfic indicies to the Composite Image
var addIndices = function(image) {
  var nirg = image.normalizedDifference(['B8', 'B3']).rename(['GNDVI'])
  var swirb = image.normalizedDifference(['B11', 'B2']).rename(['SWIR1/B'])
  var b5ndb6 = image.normalizedDifference(['B5','B6']).rename('NDB5B6')
  var ndmi = image.normalizedDifference(['B8', 'B11']).rename('ndmi')
  return image.addBands(nirg).addBands(swirb).addBands(b5ndb6).addBands(ndmi)
}
var withIndicies = addIndices(composite);

//Function to make a Cross Section give a ee.Geometry.Line
function makeCrossSection(section) {
  //Creating a Cross Section
  var crossSection = crossSection; // single line
  var numPoints = 1000; // divide the line into this many sections
  
  // Divide the cross section among the specified number of points
  var point1 = ee.List(line.coordinates().get(0));
  var point2 = ee.List(line.coordinates().get(1));
  var xMapList = ee.List.sequence(point1.get(0), point2.get(0), null, numPoints);
  var yMapList = ee.List.sequence(point1.get(1), point2.get(1), null, numPoints);
  
  // Construct a feature collection with points equally spaced
  var points = ee.FeatureCollection(xMapList.map(function(Xcoord){
    var Ycoord = yMapList.get(xMapList.indexOf(Xcoord));
    return ee.Feature(ee.Geometry.Point([Xcoord, Ycoord]));
  }));
  return points
}

var points = makeCrossSection(line);

Map.addLayer(points, {min:1, max:1, palette:['red']}, 'Cross Section', false);

// Select which bands you want to use in the Graph
var band_variation = withIndicies.select(withIndicies.bandNames()
  .filter(ee.Filter.or(
  ee.Filter.eq('item', 'NDB5B6'))));
var indices = withIndicies.select(withIndicies.bandNames()
  .filter(ee.Filter.or(
  ee.Filter.eq('item', 'GNDVI'), ee.Filter.eq('item', 'SWIR1/B'))));

//Function to Add a constant line onto the chart defined below
//Takes in the collection of points, the threshold value, the item to be named in the Legend
function add_constant(collection, level, message) {
  function set_constant(x) {
    return x.set(message, level)
  }  
  return collection.map(set_constant)
}

//Add thresholds to charts
var points_indices = add_constant(points, 0.30, "GNDVI Level");
points_indices = add_constant(points_indices, 0.65, "SWIR1/B Level");
var points_sar = add_constant(points, -19, "Level");

var index_data = indices.reduceRegions(points_indices, ee.Reducer.first(), 10);
var band_variation_data = band_variation.reduceRegions(points, ee.Reducer.first(), 10);
var sar_data = sar_comp.reduceRegions(points_sar, ee.Reducer.first(), 10);
var srtm_data = srtm.reduceRegions(points, ee.Reducer.first(), 10);

// text style variables
var textStyleTicks = {
color: 'black',
fontName: 'arial',
fontSize: 30,
bold: false,
italic: false
};
var textStyleTitles = {
color: 'black',
fontName: 'arial',
fontSize: 55, // 45 for normalized difference, 55 else
bold: true,
italic: false
};
var textStyleLegend = {
color: 'black',
fontName: 'arial',
fontSize: 25,
bold: true,
italic: false
};
// Display a chart of band values along the cross section
var chartStyleIndices = {
  legend: {textStyle: textStyleLegend},
  hAxis: {
    title: 'Cross Section Points',
    titleTextStyle: textStyleTitles,
    textStyle: textStyleTicks,
    //gridlines: {color: 'FFFFFF'},
    viewWindow: {min: 0, max: 1000}
  },
  vAxis: {
    title: 'Index Values',
    titleTextStyle: textStyleTitles,
    textStyle: textStyleTicks,
    //gridlines: {color: 'FFFFFF'},
    format: 'short',
    //baselineColor: 'FFFFFF',
    viewWindow: {min: -0.4, max: 0.8}
  },
  series: {
   0: {lineWidth: 2, color: 'green'},
    1: {lineWidth: 2, color: 'red'},
    2: {lineWidth: 2, color: 'blue'},
    3: {lineWidth: 2, color: 'orange'},
  }
  //chartArea: {backgroundColor: 'EBEBEB'}
}
print(ui.Chart.feature.byFeature(index_data).setOptions(chartStyleIndices));

var chartStyleBandVar = {
  colors: ['red'],
  legend: {textStyle: textStyleLegend},
  hAxis: {
    title: 'Cross Section Points',
    titleTextStyle: textStyleTitles,
    textStyle: textStyleTicks,
    viewWindow: {min: 0, max: 1000}
  },
  vAxis: {
    title: 'Normalized Difference of Bands',
    titleTextStyle: textStyleTitles,
    textStyle: textStyleTicks,
    format: 'short',
    viewWindow: {min: -0.6, max: 0.4}
  }
}
print(ui.Chart.feature.byFeature(band_variation_data).setOptions(chartStyleBandVar));

var chartStyleSar = {
  colors: ['red', 'orange'],
  legend: {textStyle: textStyleLegend},
  vAxis: {  // y-axis
    title: 'Decibels',
    textStyle: textStyleTicks,  // tick label text style
    titleTextStyle: textStyleTitles, // axis title text style
    viewWindow: {min: -30, max: 2}
  },
  hAxis: { // x-axis
    title: 'Cross Section Points',
    textStyle: textStyleTicks,  // tick label text style
    titleTextStyle: textStyleTitles // axis title text style
  }
};
print(ui.Chart.feature.byFeature(sar_data).setSeriesNames(['Level', 'VH']).setOptions(chartStyleSar))
  
var chartStyleSRTM = {
  //title: 'Elevation',
  colors: ['gray'],
  legend: {textStyle: textStyleLegend},
  vAxis: {  // y-axis
    title: 'Meters',
    //viewWindow: {min: -30, max: 2}
    textStyle: textStyleTicks,  // tick label text style
    titleTextStyle: textStyleTitles // axis title text style
  },
  hAxis: { // x-axis
    title: 'Cross Section Points',
    textStyle: textStyleTicks,  // tick label text style
    titleTextStyle: textStyleTitles // axis title text style
  }
};
print(ui.Chart.feature.byFeature(srtm_data).setOptions(chartStyleSRTM));

// /// CODE TO MAKE CROSS SECTION LINE THICKER ON MAP
// // Create an empty image into which to paint the features, cast to byte.
// var empty = ee.Image().byte();

// // Paint all the polygon edges with the same number and width, display.
// var outline = empty.paint({
//   featureCollection: ee.FeatureCollection(rayline),
//   color: 1,
//   width: 7
// });
// Map.addLayer(outline, {palette: '02E4FF'}, 'cross section');
