/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var s2 = ee.ImageCollection("COPERNICUS/S2_SR"),
    active_mines = ee.FeatureCollection("users/EmilyNason/cod_mines_curated_all_opendata_p_ipis"),
    roi1 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[29.554129272985683, 3.1591674847348235],
          [29.554129272985683, 3.092319151883147],
          [29.625197083044277, 3.092319151883147],
          [29.625197083044277, 3.1591674847348235]]]),
    rishi_area = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[27.35, -7.5],
          [27.35, -7.6],
          [27.45, -7.6],
          [27.45, -7.5]]]),
    emily_area = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[25.599767416235803, -10.585427828449394],
          [25.599767416235803, -10.82359555219894],
          [25.977297323462366, -10.82359555219894],
          [25.977297323462366, -10.585427828449394]]]),
    emily_area2 = 
    /* color: #ffc82d */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[26, -10.5],
          [26, -10.75],
          [26.25, -10.75],
          [26.25, -10.5]]]),
    rgb_vis_s2 = {"min":0,"max":3000,"bands":["B4","B3","B2"]},
    rgb_vis_s2_scaled = {"min":0,"max":0.3,"bands":["B4","B3","B2"]},
    vegetation = 
    /* color: #03d605 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[25.723167528711194, -10.624024812838021],
                  [25.725399126611585, -10.618288320464597],
                  [25.719219317041272, -10.619300650473999]]]),
            {
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[25.851055254541272, -10.653380468528928],
                  [25.851741900049085, -10.658441502757649],
                  [25.858265032373303, -10.657091901854827]]]),
            {
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[25.694500078760022, -10.663502452852622],
                  [25.694500078760022, -10.67159979791131],
                  [25.70102321108424, -10.667551152326697]]]),
            {
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[26.17863569299228, -10.59994607971501],
                  [26.182755566039155, -10.605682916173103],
                  [26.18361387292392, -10.598933685649953]]]),
            {
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[26.06499586144931, -10.594884075918456],
                  [26.06705579797275, -10.600958470432342],
                  [26.076153850951265, -10.594884075918456]]]),
            {
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[27.389391300697977, -7.525325011458537],
                  [27.390507099648172, -7.530770829093477],
                  [27.391880390663797, -7.526090833696318]]]),
            {
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[29.61096022437251, 3.137524285659713],
                  [29.615337589484813, 3.1353817326743076],
                  [29.615251758796337, 3.1382099016876595]]]),
            {
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[29.623234012824657, 3.149179696893352],
                  [29.621345737678173, 3.14669436277702],
                  [29.624263981086376, 3.1454945441855418]]]),
            {
              "system:index": "7"
            })]),
    agriculture = 
    /* color: #ffe604 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[25.873027910791272, -10.716131337061165],
                  [25.877491106592053, -10.707023145073794],
                  [25.865474810205335, -10.707023145073794]]]),
            {
              "system:index": "0"
            })]),
    urban = 
    /* color: #fd3602 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[25.93173610170924, -10.685432263456185],
                  [25.93448268374049, -10.689480670795726],
                  [25.936199297510022, -10.683745411133291]]]),
            {
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[25.924183001123303, -10.644945224620642],
                  [25.927616228662366, -10.641908479662566],
                  [25.923153032861585, -10.640558805528517]]]),
            {
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[25.874401201806897, -10.750874884518378],
                  [25.879207720361585, -10.749525695109359],
                  [25.87337123354518, -10.746152695200317]]]),
            {
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[26.11872587243564, -10.61884348743809],
                  [26.120785808959077, -10.608720021346729],
                  [26.115635967650483, -10.602308319514]]]),
            {
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[27.403639194985086, -7.553234103013232],
                  [27.403896687050516, -7.556977868563499],
                  [27.407844898720437, -7.556977868563499]]]),
            {
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[29.564783313972118, 3.1386384114766837],
                  [29.569074848395946, 3.135638839264337],
                  [29.571306446296337, 3.1394097286541234]]]),
            {
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[29.563581684333446, 3.126125853383053],
                  [29.565899112922313, 3.1233833549361267],
                  [29.568388202888134, 3.1244974957944742]]]),
            {
              "system:index": "6"
            })]),
    tailings = 
    /* color: #04a8ff */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[25.863758196435803, -10.796406485089296],
                  [25.862728228174085, -10.789324244076429],
                  [25.856548418603772, -10.788986990342238]]]),
            {
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[25.75252162417018, -10.805174742664075],
                  [25.756641497217053, -10.801802366200215],
                  [25.751148333154553, -10.800453405009923]]]),
            {
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[25.802879774766566, -10.785935133117674],
                  [25.80382391233981, -10.78365863741676],
                  [25.80227895994723, -10.782731171265976]]]),
            {
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[25.906311069365277, -10.668966328764593],
                  [25.906139407988324, -10.670315877001833],
                  [25.9076843603809, -10.66938806323207]]]),
            {
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[26.178807354369233, -10.573622746902238],
                  [26.181553936400483, -10.567885310423613],
                  [26.171597576537202, -10.567885310423613]]]),
            {
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[27.402609226723367, -7.531791912283662],
                  [27.402609226723367, -7.5334086224141625],
                  [27.403467533608133, -7.5334086224141625]]]),
            {
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[29.57946036170161, 3.1233833549361267],
                  [29.58074782202876, 3.124154683348621],
                  [29.579374531013134, 3.1245831988884443]]]),
            {
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[29.598600605231884, 3.131610828762363],
                  [29.6022054941479, 3.1292111555658337],
                  [29.602806308967235, 3.1334962824166563]]]),
            {
              "system:index": "7"
            })]),
    mining = 
    /* color: #9802ff */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[25.901590381499066, -10.661712404408048],
                  [25.900560413237347, -10.665508084074284],
                  [25.90296367251469, -10.66407416620963]]]),
            {
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[25.908027683134808, -10.66618286661328],
                  [25.90948680483891, -10.66618286661328],
                  [25.907856021757855, -10.66474895192893]]]),
            {
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[25.8187060064172, -10.787726765992291],
                  [25.820422620186733, -10.785787541553018],
                  [25.81595942438595, -10.785281654860224]]]),
            {
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[25.90801842878996, -10.623822937085885],
                  [25.908640701281413, -10.623401139566162],
                  [25.90722449492155, -10.623126970866004]]]),
            {
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[26.18292722741611, -10.583409890995714],
                  [26.19013700524814, -10.579360076136135],
                  [26.18189725915439, -10.579360076136135]]]),
            {
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[26.064480877318452, -10.633353203958643],
                  [26.064480877318452, -10.629641481639327],
                  [26.05830106774814, -10.629641481639327]]]),
            {
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[27.400720951576883, -7.54200261180588],
                  [27.400720951576883, -7.540641199115399],
                  [27.39831769229954, -7.540556110680058]]]),
            {
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[27.360723850746805, -7.5483841766887165],
                  [27.362440464516336, -7.546852609703538],
                  [27.359436390419656, -7.546852609703538]]]),
            {
              "system:index": "7"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[29.603063801032665, 3.144980335795055],
                  [29.603063801032665, 3.14669436277702],
                  [29.601003864509227, 3.145665946926016]]]),
            {
              "system:index": "8"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[29.580790737372997, 3.110656354428923],
                  [29.580876568061473, 3.112498993658311],
                  [29.577872493964794, 3.1125846977300977]]]),
            {
              "system:index": "9"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[29.58096239874995, 3.104099960836114],
                  [29.582335689765575, 3.105514088388665],
                  [29.579589107734325, 3.105985463818749]]]),
            {
              "system:index": "10"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[29.570362308723094, 3.115884299191694],
                  [29.569031933051708, 3.112413289579539],
                  [29.571563938361766, 3.1124561416197962]]]),
            {
              "system:index": "11"
            })]),
    s1 = ee.ImageCollection("COPERNICUS/S1_GRD"),
    imageVisParam = {"opacity":1,"bands":["VH","VV","VV"],"min":-15.20573084265961,"max":-9.106746149886456,"gamma":1},
    coltan = /* color: #d63000 */ee.Geometry.Polygon(
        [[[28.856605146872685, -1.5255798156043374],
          [28.856605146872685, -1.6134374582934945],
          [28.972648237692997, -1.6134374582934945],
          [28.972648237692997, -1.5255798156043374]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//////////////////////////////////////////////////
// SENTINEL-2 //
//////////////////////////////////////////////////
// Cloud mask function for Sentinel-2
function maskS2clouds(image) {
    var qa = image.select('QA60');

    var cloudBitMask = 1 << 10;
    var cirrusBitMask = 1 << 11;

    var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(qa.bitwiseAnd(cirrusBitMask).eq(0));

    return image.updateMask(mask).divide(10000).select("B.*")
        .copyProperties(image, ["system:time_start"]); 
}

// Create composite for 2021 for Sentinel-2
function create_whole_composite(geometry) {
    var composite = s2
        .filter(ee.Filter.bounds(geometry))
        .filter(ee.Filter.date('2021-01-01', '2021-12-31'))
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
        .map(maskS2clouds)
        .select('B.*')
        .median().clip(geometry);
    return composite;
}

// Add composite images of the ROIs to the Map
var regions = ee.Geometry.MultiPolygon(
  ee.List([roi1, rishi_area, emily_area, emily_area2, coltan]));
var comp = create_whole_composite(regions);
Map.addLayer(comp, rgb_vis_s2_scaled, "regions");

// Calculate average NIR/G for a given feature
function calculate_nir_g(feature) {
    var geometry = feature.geometry();
    // Images and Bands
    var composite_s2 = s2
        .filter(ee.Filter.bounds(geometry))
        .filter(ee.Filter.date('2021-01-01', '2021-12-31'))
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
        .map(maskS2clouds)
        .select('B.*')
        .median().clip(geometry);
    var nir_g_s2 = composite_s2.normalizedDifference(['B8', 'B3']).rename('NIR/G');
    // Average NIR/G   
    var stats_s2 = nir_g_s2.reduceRegion({
        'reducer': ee.Reducer.mean(),
        'geometry': nir_g_s2.geometry(),
        'scale': 30
    });
    var avg_s2 = ee.Number(stats_s2.get('NIR/G'));
    return feature.set('avg nir/g', avg_s2);
}

// Calculate average SWIR1/B for a given feature
function calculate_swir1_b(feature) {
    var geometry = feature.geometry();
    // Images and Bands
    var composite_s2 = s2
        .filter(ee.Filter.bounds(geometry))
        .filter(ee.Filter.date('2021-01-01', '2021-12-31'))
        .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
        .select('B.*')
        .median().clip(geometry);
    var swir1_b_s2 = composite_s2.normalizedDifference(['B11', 'B2']).rename('SWIR1/B');
    // Average SWIR1/B   
    var stats_s2 = swir1_b_s2.reduceRegion({
        'reducer': ee.Reducer.mean(),
        'geometry': swir1_b_s2.geometry(),
        'scale': 30
    });
    var avg_s2 = ee.Number(stats_s2.get('SWIR1/B'));
    return feature.set('avg swir1/b', avg_s2);
}

// Average NIR/G and SWIR1/B for each feature
// var a = vegetation.map(calculate_nir_g);
// print('vegetation avg nir/g', a.aggregate_array('avg nir/g'));

// var b = agriculture.map(calculate_nir_g);
// print('agriculture avg nir/g', b.aggregate_array('avg nir/g'));

// var c = urban.map(calculate_nir_g);
// print('urban avg nir/g', c.aggregate_array('avg nir/g'));

// var d = tailings.map(calculate_nir_g);
// print('tailings avg nir/g', d.aggregate_array('avg nir/g'));

// var e = mining.map(calculate_nir_g);
// print('mining avg nir/g', e.aggregate_array('avg nir/g'));

// var f = vegetation.map(calculate_swir1_b);
// print('vegetation avg swir1/b', f.aggregate_array('avg swir1/b'));

// var g = agriculture.map(calculate_swir1_b);
// print('agriculture avg swir1/b', g.aggregate_array('avg swir1/b'));

// var f = urban.map(calculate_swir1_b);
// print('urban avg swir1/b', f.aggregate_array('avg swir1/b'));

// var h = tailings.map(calculate_swir1_b);
// print('tailings avg swir1/b', h.aggregate_array('avg swir1/b'));

// var i = mining.map(calculate_swir1_b);
// print('mining avg swir1/b', i.aggregate_array('avg swir1/b'));


//Average NIR/G and SWIR1/B for each feature collection
var veg_nir_g = vegetation.map(calculate_nir_g)
    .aggregate_array('avg nir/g')
    .reduce(ee.Reducer.mean());
print('all vegetation avg nir/g', veg_nir_g);

var ag_nir_g = agriculture.map(calculate_nir_g) // only one
    .aggregate_array('avg nir/g')
    .reduce(ee.Reducer.mean());
print('all agriculture avg nir/g', ag_nir_g);

var urban_nir_g = urban.map(calculate_nir_g)
    .aggregate_array('avg nir/g')
    .reduce(ee.Reducer.mean());
print('all urban avg nir/g', urban_nir_g);

var tail_nir_g = tailings.map(calculate_nir_g)
    .aggregate_array('avg nir/g')
    .reduce(ee.Reducer.mean());
print('all tailings avg nir/g', tail_nir_g);

var mine_nir_g = mining.map(calculate_nir_g)
    .aggregate_array('avg nir/g')
    .reduce(ee.Reducer.mean());
print('all mines avg nir/g', mine_nir_g);

var veg_swir1_b = vegetation.map(calculate_swir1_b)
    .aggregate_array('avg swir1/b')
    .reduce(ee.Reducer.mean());
print('all vegetation avg swir1/b', veg_swir1_b);

var ag_swir1_b = agriculture.map(calculate_swir1_b) // only one
    .aggregate_array('avg swir1/b')
    .reduce(ee.Reducer.mean());
print('all agriculture avg swir1/b', ag_swir1_b);

var urban_swir1_b = urban.map(calculate_swir1_b)
    .aggregate_array('avg swir1/b')
    .reduce(ee.Reducer.mean());
print('all urban avg swir1/b', urban_swir1_b);

var tail_swir1_b = tailings.map(calculate_swir1_b)
    .aggregate_array('avg swir1/b')
    .reduce(ee.Reducer.mean());
print('all tailings avg swir1/b', tail_swir1_b);

var mine_swir1_b = mining.map(calculate_swir1_b)
    .aggregate_array('avg swir1/b')
    .reduce(ee.Reducer.mean());
print('all mines avg swir1/b', mine_swir1_b);


// Average NIR/G and SWIR1/B for Mining and Non-Mining
var all_mining = mining.merge(tailings);
var non_mining = vegetation.merge(agriculture).merge(urban);

var all_mine_nir_g = all_mining.map(calculate_nir_g)
    .aggregate_array('avg nir/g')
    .reduce(ee.Reducer.mean());
print('all mining avg nir/g', all_mine_nir_g);

var non_mine_nir_g = non_mining.map(calculate_nir_g)
    .aggregate_array('avg nir/g')
    .reduce(ee.Reducer.mean());
print('non mining avg nir/g', non_mine_nir_g);

var all_mine_swir1_b = all_mining.map(calculate_swir1_b)
    .aggregate_array('avg swir1/b')
    .reduce(ee.Reducer.mean());
print('all mining avg swir1/b', all_mine_swir1_b);

var non_mine_swir1_b = non_mining.map(calculate_swir1_b)
    .aggregate_array('avg swir1/b')
    .reduce(ee.Reducer.mean());
print('non mining avg swir1/b', non_mine_swir1_b);


//////////////////////////////////////////////////
// SENTINEL-1 //
//////////////////////////////////////////////////

// Create composite for 2021 for Sentinel-1
function create_sar_composite(geometry) {
    var SMOOTHING_RADIUS = 25;
    var composite = s1
        .filter(ee.Filter.eq('instrumentMode','IW'))
        .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
        .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING')) 
        .filter(ee.Filter.eq('resolution_meters',10))
        .filter(ee.Filter.date('2021-01-01', '2021-12-31'))
        .filterBounds(geometry)
        .select(['VH', 'VV'])
        .median().clip(geometry);
    var comp_filtered = composite.focal_mean(SMOOTHING_RADIUS, 'circle', 'meters');
    return comp_filtered;
}

// Calculate average VH for a given feature
function calculate_sar_vh(feature) {
    var g = feature.geometry();
    
    // Images and Bands
    var composite = create_sar_composite(g).select('VH');
    
    // Average VH   
    var stats = composite.reduceRegion({
        'reducer': ee.Reducer.mean(),
        'geometry': g,
        'scale': 30
    });
    
    var avg_vh = ee.Number(stats.get('VH'));
    
    return feature.set('vh_percent', avg_vh);
}

// Calculate average VV for a given feature
function calculate_sar_vv(feature) {
    var g = feature.geometry();
    
    // Images and Bands
    var composite = create_sar_composite(g).select('VV');
    
    // Average VV  
    var stats = composite.reduceRegion({
        'reducer': ee.Reducer.mean(),
        'geometry': g,
        'scale': 30
    });
    
    var avg_vv = ee.Number(stats.get('VV'));
    
    return feature.set('vv_percent', avg_vv);
}

// Average VH and VV for each feature collection
// var veg_vh = vegetation.map(calculate_sar_vh)
//     .aggregate_array('vh_percent')
//     .reduce(ee.Reducer.mean());
// print('all vegetation avg vh', veg_vh);

// var ag_vh = agriculture.map(calculate_sar_vh) // only one
//     .aggregate_array('vh_percent')
//     .reduce(ee.Reducer.mean());
// print('all agriculture avg vh', ag_vh);

// var urban_vh = urban.map(calculate_sar_vh)
//     .aggregate_array('vh_percent')
//     .reduce(ee.Reducer.mean());
// print('all urban avg vh', urban_vh);

// var tail_vh = tailings.map(calculate_sar_vh)
//     .aggregate_array('vh_percent')
//     .reduce(ee.Reducer.mean());
// print('all tailings avg vh', tail_vh);

// var mine_vh = mining.map(calculate_sar_vh)
//     .aggregate_array('vh_percent')
//     .reduce(ee.Reducer.mean());
// print('all mines avg vh', mine_vh);

// var veg_vv = vegetation.map(calculate_sar_vv)
//     .aggregate_array('vv_percent')
//     .reduce(ee.Reducer.mean());
// print('all vegetation avg vv', veg_vv);

// var ag_vv = agriculture.map(calculate_sar_vv) // only one
//     .aggregate_array('vv_percent')
//     .reduce(ee.Reducer.mean());
// print('all agriculture avg vv', ag_vv);

// var urban_vv = urban.map(calculate_sar_vv)
//     .aggregate_array('vv_percent')
//     .reduce(ee.Reducer.mean());
// print('all urban avg vv', urban_vv);

// var tail_vv = tailings.map(calculate_sar_vv)
//     .aggregate_array('vv_percent')
//     .reduce(ee.Reducer.mean());
// print('all tailings avg vv', tail_vv);

// var mine_vv = mining.map(calculate_sar_vv)
//     .aggregate_array('vv_percent')
//     .reduce(ee.Reducer.mean());
// print('all mines avg vv', mine_vv);


// // Average VH and VV for Mining and Non-Mining
// var all_mining = mining.merge(tailings);
// var non_mining = vegetation.merge(agriculture).merge(urban);

// var all_mine_vh = all_mining.map(calculate_sar_vh)
//     .aggregate_array('vh_percent')
//     .reduce(ee.Reducer.mean());
// print('all mining VH', all_mine_vh);

// var non_mine_vh = non_mining.map(calculate_sar_vh)
//     .aggregate_array('vh_percent')
//     .reduce(ee.Reducer.mean());
// print('non mining VH', non_mine_vh);

// var all_mine_vv = all_mining.map(calculate_sar_vv)
//     .aggregate_array('vv_percent')
//     .reduce(ee.Reducer.mean());
// print('all mining VV', all_mine_vv);

// var non_mine_vv = non_mining.map(calculate_sar_vv)
//     .aggregate_array('vv_percent')
//     .reduce(ee.Reducer.mean());
// print('non mining VV', non_mine_vv);

// var sar_comp = create_sar_composite(regions);
// Map.addLayer(sar_comp, imageVisParam, 'regions sar');

// Active Coltan Mines
var coltanPrimary = active_mines.filter(ee.Filter.eq('mineral1', 'Coltan'));
var coltanSecondary = active_mines.filter(ee.Filter.eq('mineral2', 'Coltan'));
var coltanTertiary = active_mines.filter(ee.Filter.eq('mineral3', 'Coltan'));
Map.addLayer(coltanPrimary, {color: 'red'}, 'Coltan Primary', false);
Map.addLayer(coltanSecondary, {color: 'orange'}, 'Coltan Secondary', false);
Map.addLayer(coltanTertiary, {color: 'yellow'}, 'Coltan Tertiary', false);
