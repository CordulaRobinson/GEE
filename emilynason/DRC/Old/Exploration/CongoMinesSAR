/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geometry = 
    /* color: #0b4a8b */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[25.67484288936783, -10.52500539578282],
          [25.67484288936783, -10.831343855184292],
          [26.285562854675604, -10.831343855184292],
          [26.285562854675604, -10.52500539578282]]], null, false),
    mines = ee.FeatureCollection("users/EmilyNason/cod_mines_curated_all_opendata_p_ipis"),
    gsw = ee.Image("JRC/GSW1_3/GlobalSurfaceWater"),
    geometry2 = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[25.312049383254802, -8.915839090581105],
          [25.312049383254802, -11.489010824923026],
          [28.300330633254802, -11.489010824923026],
          [28.300330633254802, -8.915839090581105]]], null, false),
    geometry3 = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPoint(
        [[25.711746310523672, -10.794851116752717],
         [25.721359347633047, -10.787768839091934],
         [25.69011697702758, -10.793839373017887],
         [25.943145846656485, -10.770568327655818],
         [25.763588046363516, -10.624625189553852],
         [25.77869424753539, -10.636097828485335],
         [25.804786776832266, -10.623950315015236],
         [25.883407687476797, -10.613489569048616],
         [25.897483920386954, -10.623612877186748],
         [26.125975941947623, -10.602353542973933],
         [25.856119166971773, -10.741483309425027],
         [25.856505405069917, -10.737519925101292],
         [25.85796452677402, -10.736634481072413]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
Map.centerObject(geometry, 11.5);
var beforeStart = '2019-06-01';
var beforeEnd = '2020-01-01';
var afterStart = '2021-06-01';
var afterEnd = '2022-01-01';

var beforeComp = ee.Image(ee.ImageCollection("COPERNICUS/S2_SR")
                      .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
                      .filterBounds(geometry) 
                      .filterDate(ee.Date(beforeStart), ee.Date(beforeEnd))
                      .median()
                      .clip(geometry));
var afterComp = ee.Image(ee.ImageCollection("COPERNICUS/S2_SR") 
                      .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
                      .filterBounds(geometry) 
                      .filterDate(ee.Date(afterStart), ee.Date(afterEnd))
                      .median()
                      .clip(geometry));

var rgbVis = {
  bands: ['B4', 'B3', 'B2'],
  min: 0,
  max: 3000,
};

Map.addLayer(beforeComp, rgbVis, '2019');
Map.addLayer(afterComp, rgbVis, '2021');

var collection = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filter(ee.Filter.eq('instrumentMode','IW'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING')) 
  .filter(ee.Filter.eq('resolution_meters',10))
  .filterBounds(geometry)
  .select('VH');

var beforeCollection = collection.filterDate(beforeStart, beforeEnd);
var afterCollection = collection.filterDate(afterStart,afterEnd);

var before = beforeCollection.mosaic().clip(geometry);
var after = afterCollection.mosaic().clip(geometry);

Map.addLayer(before, {min:-25,max:0}, 'Before', false);
Map.addLayer(after, {min:-25,max:0}, 'After', false); 

var beforeFiltered = ee.Image(toDB(RefinedLee(toNatural(before))));
var afterFiltered = ee.Image(toDB(RefinedLee(toNatural(after))));

Map.addLayer(beforeFiltered, {min:-25,max:0}, 'Before Filtered');
Map.addLayer(afterFiltered, {min:-25,max:0}, 'After Filtered'); 

// VV
var collection2 = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filter(ee.Filter.eq('instrumentMode','IW'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.eq('orbitProperties_pass', 'DESCENDING')) 
  .filter(ee.Filter.eq('resolution_meters',10))
  .filterBounds(geometry)
  .select('VV');
  
var beforeCollection2 = collection2.filterDate(beforeStart, beforeEnd);
var afterCollection2 = collection2.filterDate(afterStart,afterEnd);

var before2 = beforeCollection2.mosaic().clip(geometry);
var after2 = afterCollection2.mosaic().clip(geometry);

Map.addLayer(before2, {min:-25,max:0}, 'Before2', false);
Map.addLayer(after2, {min:-25,max:0}, 'After2', false); 

var beforeFiltered2 = ee.Image(toDB(RefinedLee(toNatural(before2))));
var afterFiltered2 = ee.Image(toDB(RefinedLee(toNatural(after2))));

Map.addLayer(beforeFiltered2, {min:-25,max:0}, 'Before Filtered 2');
Map.addLayer(afterFiltered2, {min:-25,max:0}, 'After Filtered 2');


//############################
// Speckle Filtering Functions
//############################

// Function to convert from dB
function toNatural(img) {
  return ee.Image(10.0).pow(img.select(0).divide(10.0));
}

//Function to convert to dB
function toDB(img) {
  return ee.Image(img).log10().multiply(10.0);
}

//Applying a Refined Lee Speckle filter as coded in the SNAP 3.0 S1TBX:

//https://github.com/senbox-org/s1tbx/blob/master/s1tbx-op-sar-processing/src/main/java/org/esa/s1tbx/sar/gpf/filtering/SpeckleFilters/RefinedLee.java
//Adapted by Guido Lemoine

// by Guido Lemoine
function RefinedLee(img) {
  // img must be in natural units, i.e. not in dB!
  // Set up 3x3 kernels 
  var weights3 = ee.List.repeat(ee.List.repeat(1,3),3);
  var kernel3 = ee.Kernel.fixed(3,3, weights3, 1, 1, false);

  var mean3 = img.reduceNeighborhood(ee.Reducer.mean(), kernel3);
  var variance3 = img.reduceNeighborhood(ee.Reducer.variance(), kernel3);

  // Use a sample of the 3x3 windows inside a 7x7 windows to determine gradients and directions
  var sample_weights = ee.List([[0,0,0,0,0,0,0], [0,1,0,1,0,1,0],[0,0,0,0,0,0,0], [0,1,0,1,0,1,0], [0,0,0,0,0,0,0], [0,1,0,1,0,1,0],[0,0,0,0,0,0,0]]);

  var sample_kernel = ee.Kernel.fixed(7,7, sample_weights, 3,3, false);

  // Calculate mean and variance for the sampled windows and store as 9 bands
  var sample_mean = mean3.neighborhoodToBands(sample_kernel); 
  var sample_var = variance3.neighborhoodToBands(sample_kernel);

  // Determine the 4 gradients for the sampled windows
  var gradients = sample_mean.select(1).subtract(sample_mean.select(7)).abs();
  gradients = gradients.addBands(sample_mean.select(6).subtract(sample_mean.select(2)).abs());
  gradients = gradients.addBands(sample_mean.select(3).subtract(sample_mean.select(5)).abs());
  gradients = gradients.addBands(sample_mean.select(0).subtract(sample_mean.select(8)).abs());

  // And find the maximum gradient amongst gradient bands
  var max_gradient = gradients.reduce(ee.Reducer.max());

  // Create a mask for band pixels that are the maximum gradient
  var gradmask = gradients.eq(max_gradient);

  // duplicate gradmask bands: each gradient represents 2 directions
  gradmask = gradmask.addBands(gradmask);

  // Determine the 8 directions
  var directions = sample_mean.select(1).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(7))).multiply(1);
  directions = directions.addBands(sample_mean.select(6).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(2))).multiply(2));
  directions = directions.addBands(sample_mean.select(3).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(5))).multiply(3));
  directions = directions.addBands(sample_mean.select(0).subtract(sample_mean.select(4)).gt(sample_mean.select(4).subtract(sample_mean.select(8))).multiply(4));
  // The next 4 are the not() of the previous 4
  directions = directions.addBands(directions.select(0).not().multiply(5));
  directions = directions.addBands(directions.select(1).not().multiply(6));
  directions = directions.addBands(directions.select(2).not().multiply(7));
  directions = directions.addBands(directions.select(3).not().multiply(8));

  // Mask all values that are not 1-8
  directions = directions.updateMask(gradmask);

  // "collapse" the stack into a singe band image (due to masking, each pixel has just one value (1-8) in it's directional band, and is otherwise masked)
  directions = directions.reduce(ee.Reducer.sum());  

  //var pal = ['ffffff','ff0000','ffff00', '00ff00', '00ffff', '0000ff', 'ff00ff', '000000'];
  //Map.addLayer(directions.reduce(ee.Reducer.sum()), {min:1, max:8, palette: pal}, 'Directions', false);

  var sample_stats = sample_var.divide(sample_mean.multiply(sample_mean));

  // Calculate localNoiseVariance
  var sigmaV = sample_stats.toArray().arraySort().arraySlice(0,0,5).arrayReduce(ee.Reducer.mean(), [0]);

  // Set up the 7*7 kernels for directional statistics
  var rect_weights = ee.List.repeat(ee.List.repeat(0,7),3).cat(ee.List.repeat(ee.List.repeat(1,7),4));

  var diag_weights = ee.List([[1,0,0,0,0,0,0], [1,1,0,0,0,0,0], [1,1,1,0,0,0,0], 
    [1,1,1,1,0,0,0], [1,1,1,1,1,0,0], [1,1,1,1,1,1,0], [1,1,1,1,1,1,1]]);

  var rect_kernel = ee.Kernel.fixed(7,7, rect_weights, 3, 3, false);
  var diag_kernel = ee.Kernel.fixed(7,7, diag_weights, 3, 3, false);

  // Create stacks for mean and variance using the original kernels. Mask with relevant direction.
  var dir_mean = img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel).updateMask(directions.eq(1));
  var dir_var = img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel).updateMask(directions.eq(1));

  dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel).updateMask(directions.eq(2)));
  dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel).updateMask(directions.eq(2)));

  // and add the bands for rotated kernels
  for (var i=1; i<4; i++) {
    dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), rect_kernel.rotate(i)).updateMask(directions.eq(2*i+1)));
    dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), rect_kernel.rotate(i)).updateMask(directions.eq(2*i+1)));
    dir_mean = dir_mean.addBands(img.reduceNeighborhood(ee.Reducer.mean(), diag_kernel.rotate(i)).updateMask(directions.eq(2*i+2)));
    dir_var = dir_var.addBands(img.reduceNeighborhood(ee.Reducer.variance(), diag_kernel.rotate(i)).updateMask(directions.eq(2*i+2)));
  }

  // "collapse" the stack into a single band image (due to masking, each pixel has just one value in it's directional band, and is otherwise masked)
  dir_mean = dir_mean.reduce(ee.Reducer.sum());
  dir_var = dir_var.reduce(ee.Reducer.sum());

  // A finally generate the filtered value
  var varX = dir_var.subtract(dir_mean.multiply(dir_mean).multiply(sigmaV)).divide(sigmaV.add(1.0));

  var b = varX.divide(dir_var);

  var result = dir_mean.add(b.multiply(img.subtract(dir_mean)));
  return(result.arrayFlatten([['sum']]));
}
//#######################################################
/*
// NDVI
var ndviBefore = beforeComp.normalizedDifference(['B8', 'B4']).rename(['ndvi']); // NIR, RED
var ndviAfter = afterComp.normalizedDifference(['B8', 'B4']).rename(['ndvi']); // NIR, RED

// Masking Constants
var cpThreshold = 8;
var permanentWater = gsw.select('seasonality').gte(7).clip(geometry);

// ################# VH ###################

// 2019 VH
var waterStorage2019 = beforeFiltered.lt(-24).rename('water').selfMask();
var connectW2019 = waterStorage2019.connectedPixelCount(25);
var waterStorage2019 = waterStorage2019.updateMask(connectW2019.gt(cpThreshold));
Map.addLayer(waterStorage2019, {min:0, max:1, palette: ['A9D3FE']}, '2019 Water Storage'); // light blue

var vv2019 = beforeFiltered.gte(-24).and(beforeFiltered.lt(-18)).rename('mine').selfMask();
var vv2019 = vv2019.where(permanentWater,0).selfMask();
var connectVV2019 = vv2019.connectedPixelCount(25);
var vv2019 = vv2019.updateMask(connectVV2019.gt(cpThreshold));
Map.addLayer(vv2019, {min:0, max:1, palette: ['pink']}, '2019 Initial Mining Estimate');

var mining2019 = beforeFiltered.gte(-24).and(beforeFiltered.lt(-18)).and(ndviBefore.lt(0.1)).rename('mine').selfMask();
var mining2019 = mining2019.where(permanentWater,0).selfMask();
var connectM2019 = mining2019.connectedPixelCount(25);
var mining2019 = mining2019.updateMask(connectM2019.gt(cpThreshold));
Map.addLayer(mining2019, {min:0, max:1, palette: ['purple']}, '2019 Final Mining Estimate');

// 2021 VH
var waterStorage2021 = afterFiltered.lt(-24).rename('water').selfMask();
var connectW2021 = waterStorage2021.connectedPixelCount(25);
var waterStorage2021 = waterStorage2021.updateMask(connectW2021.gt(cpThreshold));
Map.addLayer(waterStorage2021, {min:0, max:1, palette: ['blue']}, '2021 Water Storage');

var vv2021 = afterFiltered.gte(-24).and(afterFiltered.lt(-18)).rename('mine').selfMask();
var vv2021 = vv2021.where(permanentWater,0).selfMask();
var connectVV2021 = vv2021.connectedPixelCount(25);
var vv2021 = vv2021.updateMask(connectVV2021.gt(cpThreshold));
Map.addLayer(vv2021, {min:0, max:1, palette: ['orange']}, '2021 Initial Mining Estimate');

var mining2021 = afterFiltered.gte(-24).and(afterFiltered.lt(-18)).and(ndviAfter.lt(0.1)).rename('mine').selfMask();
var mining2021 = mining2021.where(permanentWater,0).selfMask();
var connectM2021 = mining2021.connectedPixelCount(25);
var mining2021 = mining2021.updateMask(connectM2021.gt(cpThreshold));
Map.addLayer(mining2021, {min:0, max:1, palette: ['red']}, '2021 Final Mining Estimate');

Map.addLayer(mines, {color: 'white'}, 'mines')

// LEGEND
var legend = ui.Panel({style: {position: 'middle-right', padding: '8px 15px'}});
var makeRow = function(color, name) {
  var colorBox = ui.Label({
    style: {color: '#ffffff',
      backgroundColor: color,
      padding: '10px',
      margin: '0 0 4px 0',
    }
  });
  var description = ui.Label({
    value: name,
    style: {
      margin: '0px 0 4px 6px',
    }
  }); 
  return ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')}
)};
var title = ui.Label({
  value: 'Legend',
  style: {fontWeight: 'bold',
    fontSize: '16px',
    margin: '0px 0 4px 0px'}});
    
legend.add(title);
// legend.add(makeRow('A9D3FE', 'Water 2019')); // light blue
// legend.add(makeRow('pink', 'Initial Mine Estimate 2019'));
// legend.add(makeRow('purple','Final Mine Estimate 2019'));
// legend.add(makeRow('blue', 'Water 2021'));
// legend.add(makeRow('orange', 'Initial Mine Estimate 2021'));
// legend.add(makeRow('red','Final Mine Estimate 2021'));
// Map.add(legend);

// EXPORTING IMAGES
// var thumbnail = mining2021.getThumbURL({
//   'min': 0,
//   'max': 0.3,
//   'palette': ['purple'],
//   'dimensions': 1000,
//   'region': geometry,
// });
// print(thumbnail);

*/
